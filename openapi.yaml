openapi: 3.0.3
info:
  title: LinkHub - OpenAPI 3.0
  description: |-
    LinkHub Description
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://colink.jp/api/v1
tags:
  # - name: pet
  #   description: Everything about your Pets
  #   externalDocs:
  #     description: Find out more
  #     url: http://swagger.io
  - name: theme
    description: テーマに関するAPI
  - name: user
    description: ユーザーに関するAPI
  - name: link
    description: リンクに関するAPI
paths:
  /themes:
    get:
      tags:
        - theme
      summary: Theme Summary
      description: 投稿一覧を返す
      operationId: themeOperetaionId
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
  /themes/followings:
    get:
      tags:
        - theme
      summary: Theme Summary
      description: フォローしているユーザーの投稿一覧を返す
      operationId: themeFollowingsOperetaionId
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
  /themes/new:
    post:
      tags:
        - theme
      summary: Theme Post
      description: 投稿する
      operationId: themeOperetaionPostId
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
  /links:
    get:
      tags:
        - link
      summary: Link Summary
      description: テーマに紐づいたリンク一覧を返す
      operationId: linkOperetaionId
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
    post:
      tags:
        - link
      summary: Link Post
      description: リンクを保存するAPI
      operationId: linkOperetaionPostId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLinkRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostLinkResponse'
  /users/{user_id}/themes:
    get:
      tags:
        - user
      summary: User Summary
      description: 特定ユーザーの投稿一覧を返す(自分の場合は非公開も)
      operationId: userUserIdThemesOperetaionId
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
  /users/{user_id}/favorites:
    get:
      tags:
        - user
      summary: User Summary
      description: 特定ユーザーのいいね一覧を返す
      operationId: userUserIdFavoritesOperetaionId
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
  /users/{user_id}:
    get:
      tags:
        - user
      summary: User Summary
      description: ユーザー情報を返す
      operationId: userUserIdOperetaionId
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  # /pet:
  #   put:
  #     tags:
  #       - pet
  #     summary: Update an existing pet
  #     description: Update an existing pet by Id
  #     operationId: updatePet
  #     requestBody:
  #       description: Update an existent pet in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Pet'
  #         # application/xml:
  #         #   schema:
  #         #     $ref: '#/components/schemas/Pet'
  #         # application/x-www-form-urlencoded:
  #         #   schema:
  #         #     $ref: '#/components/schemas/Pet'
  #       required: true
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #       '405':
  #         description: Validation exception
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   post:
  #     tags:
  #       - pet
  #     summary: Add a new pet to the store
  #     description: Add a new pet to the store
  #     operationId: addPet
  #     requestBody:
  #       description: Create a new pet in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Pet'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/Pet'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/Pet'
  #       required: true
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/findByStatus:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findPetsByStatus
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: false
  #         explode: true
  #         schema:
  #           type: string
  #           default: available
  #           enum:
  #             - available
  #             - pending
  #             - sold
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/findByTags:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: false
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/{petId}:
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     description: ''
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: name
  #         in: query
  #         description: Name of pet that needs to be updated
  #         schema:
  #           type: string
  #       - name: status
  #         in: query
  #         description: Status of pet that needs to be updated
  #         schema:
  #           type: string
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     description: delete a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         description: ''
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid pet value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: additionalMetadata
  #         in: query
  #         description: Additional Metadata
  #         required: false
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
components:
  schemas:
    PostLinkRequest:
      type: object
      properties:
        links:
          type: array
          items:
            type: string
        subtitle:
          type: string
          description: "リンクを纏めるときに使う"
    PostLinkResponse:
      type: object
      properties:
        link_collection:
          $ref: '#/components/schemas/LinkCollection'  
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: test@exmaple.com
        name:
          type: string
          example: "test_name"
        introduction:
          type: string
          example: "test_introduction"
        profile_image_id:
          type: string
          example: "profile_image_id"
        github_id:
          type: string
          example: "github_id"
        twitter_id:
          type: string
          example: "twitter_id"
        facebook_id:
          type: string
          example: "facebook_id"
        homepage_url:
          type: string
          example: "homepage_url"
        is_deleted:
          type: boolean
          example: false
    Theme:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/User'
          # example: 1
        title:
          type: string
          example: "test_title"
        post_status:
          type: integer
          example: private
          enum:
            - private
            - limited
            - released
    LinkCollection:
      type: object
      properties:
        id:
          type: integer
          example: 1
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        subtitle:
          type: string
          description: "リンクを纏めるときに使う"    
    Link:
      type: object
      properties:
        id:
          type: integer
          example: 1
        url:
          $ref: '#/components/schemas/Url'
        description:
          type: string
          description: "URLの使用用途"
    Url:
      type: object
      properties:
        url:
          type: string
          example: "https://example.com"
        title:
          type: string
          example: "Example Domain"
        description:
          type: string
          example: "description"
        image_url:
          type: string
          example: ""

    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #     type:
    #       type: string
    #     message:
    #       type: string
    #   xml:
    #     name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
